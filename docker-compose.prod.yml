version: '3.8'

services:
  # 메인 애플리케이션 서비스
  main-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: user-events-main-app-prod
    ports:
      - "7070:7070"
    volumes:
      - user_events_data:/app/data
      - lightgcn_data:/app/lightgcn_data
      - user_events_db:/app/user_events.db
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - API_KEY=${API_KEY}
      - MILVUS_HOST=${MILVUS_HOST}
      - MILVUS_PORT=${MILVUS_PORT}
    command: python app.py
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7070/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 관리자 대시보드 서비스
  admin-dashboard:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: user-events-admin-dashboard-prod
    ports:
      - "7071:7071"
    volumes:
      - user_events_data:/app/data
      - lightgcn_data:/app/lightgcn_data
      - user_events_db:/app/user_events.db
    environment:
      - FLASK_APP=admin_dashboard.py
      - FLASK_ENV=production
      - PYTHONPATH=/app
    command: python admin_dashboard.py
    restart: unless-stopped
    depends_on:
      - main-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7071/admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: user-events-nginx-prod
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - main-app
      - admin-dashboard
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 캐시 (선택사항)
  redis:
    image: redis:7-alpine
    container_name: user-events-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 모니터링 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: user-events-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: user-events-grafana-prod
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  user_events_data:
    driver: local
  lightgcn_data:
    driver: local
  user_events_db:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: user-events-network-prod
    driver: bridge 